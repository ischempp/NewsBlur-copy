import logging
import pymongo

# ===================
# = Server Settings =
# ===================

ADMINS                = (
    ('Samuel Clay', 'samuel@ofbrooklyn.com'),
)

SERVER_EMAIL          = 'server@newsblur.com'
HELLO_EMAIL           = 'hello@newsblur.com'
NEWSBLUR_URL          = 'http://www.newsblur.com'

# ==================
# = Global Settngs =
# ==================

DEBUG = True
DEBUG_ASSETS = DEBUG
MEDIA_URL = '/media/'
SECRET_KEY = 'YOUR SECRET KEY'

CACHE_BACKEND = 'dummy:///'
# CACHE_BACKEND = 'locmem:///'
# CACHE_BACKEND = 'memcached://127.0.0.1:11211'

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# Set this to the username that is shown on the homepage to unauthenticated users.
HOMEPAGE_USERNAME = 'conesus'

# Google Reader OAuth API Keys
OAUTH_KEY = 'www.example.com'
OAUTH_SECRET = 'SECRET_KEY_FROM_GOOGLE'

S3_ACCESS_KEY = 'XXX'
S3_SECRET = 'SECRET'
S3_BACKUP_BUCKET = 'newsblur_backups'

STRIPE_SECRET = "YOUR-SECRET-API-KEY"
STRIPE_PUBLISHABLE = "YOUR-PUBLISHABLE-API-KEY"

# =============
# = Databases =
# =============

DATABASES = {
    'default': {
        'NAME': 'newsblur',
        'ENGINE': 'django.db.backends.mysql',
        'USER': 'newsblur',
        'PASSWORD': '',
        'HOST': '127.0.0.1',
    },
}

MONGO_DB = {
    'name': 'newsblur',
    'host': '127.0.0.1',
    'port': 27017
}

MONGODB_SLAVE = {
    'host': '127.0.0.1'
}

# Celery RabbitMQ Broker
BROKER_HOST = "127.0.0.1"

REDIS = {
    'host': '127.0.0.1',
}

# AMQP - RabbitMQ server
BROKER_HOST     = "db01.newsblur.com"
BROKER_PORT     = 5672
BROKER_USER     = "newsblur"
BROKER_PASSWORD = "newsblur"
BROKER_VHOST    = "newsblurvhost"


# ===========
# = Logging =
# ===========

# Logging (setup for development)
LOG_TO_STREAM = True

if len(logging._handlerList) < 1:
    LOG_FILE = '~/newsblur/logs/development.log'
    logging.basicConfig(level=logging.DEBUG,
                            format='%(asctime)-12s: %(message)s',
                            datefmt='%b %d %H:%M:%S',
                            handler=logging.StreamHandler)
